(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{591:function(t,s,a){"use strict";a.r(s);var r=a(5),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"let-var-const-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-var-const-的区别"}},[t._v("#")]),t._v(" let \\ var \\ const 的区别")]),t._v(" "),a("p",[t._v("let 和 const是es6引入的新的声明关键字， 和var的区别主要在于拥有了块级作用域（就是一个大括号的作用域），而且无法重复声明。")]),t._v(" "),a("p",[t._v("let和const两者间区别在于const是常量，声明后无法重新赋值。")]),t._v(" "),a("h2",{attrs:{id:"promise的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise的作用"}},[t._v("#")]),t._v(" promise的作用")]),t._v(" "),a("p",[t._v("主要就是解决异步嵌套问题")]),t._v(" "),a("h2",{attrs:{id:"改变this的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变this的方式"}},[t._v("#")]),t._v(" 改变this的方式？")]),t._v(" "),a("p",[t._v("call 、 bind 、 apply")]),t._v(" "),a("p",[a("strong",[t._v("他们的区别是什么？")])]),t._v(" "),a("p",[t._v("call和apply的区别在于apply第二个参数是数组。")]),t._v(" "),a("p",[t._v("bind和上面两者的区别是不会调用函数，而是返回一个新的函数")])])}),[],!1,null,null,null);s.default=e.exports}}]);